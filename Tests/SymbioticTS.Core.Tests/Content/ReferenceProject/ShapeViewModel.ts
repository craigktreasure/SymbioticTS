/**
 * This file was generated by SymbioticTS.
 * All changes will be lost the next time the file is generated.
 */

// tslint:disable:max-line-length

import { Circle } from './Circle';
import { IShape } from './IShape';
import { IShapeViewModelDto } from './IShapeViewModelDto';
import { Rectangle } from './Rectangle';
import { ViewModelBase } from './ViewModelBase';

export class ShapeViewModel extends ViewModelBase {
    public shapes?: IShape[];
    public readonly totalShapes: number;
    public readonly rectangles: Rectangle[];
    public readonly totalRectangles?: number;
    public readonly circles: Circle[];
    public readonly totalCircles: number;

    constructor(
        circles: Circle[],
        dateCreated: Date,
        rectangles: Rectangle[],
        totalCircles: number,
        totalShapes: number,
        dateUpdated?: Date,
        shapes?: IShape[],
        totalRectangles?: number) {
        super(dateCreated, dateUpdated);

        this.circles = circles;
        this.rectangles = rectangles;
        this.totalCircles = totalCircles;
        this.totalShapes = totalShapes;
        this.shapes = shapes;
        this.totalRectangles = totalRectangles;
    }

    public static fromDto(dto: IShapeViewModelDto): ShapeViewModel {
        const circles = dto.circles.map(Circle.fromDto);
        const dateCreated = new Date(dto.dateCreated);
        const rectangles = dto.rectangles.map(Rectangle.fromDto);
        const dateUpdated = dto.dateUpdated === undefined ? undefined : new Date(dto.dateUpdated);

        return new ShapeViewModel(
            circles,
            dateCreated,
            rectangles,
            dto.totalCircles,
            dto.totalShapes,
            dateUpdated,
            dto.shapes,
            dto.totalRectangles);
    }
}
